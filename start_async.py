import aiohttp
import asyncio

class RequestInfoObject:
    def __init__(self, method, url, headers):
        self.method = method
        self.url = url
        self.headers = headers

async def fetch(url, session, headers):
    async with session.get(url, headers=headers) as response:
        print('Calling: ' + url)
        return response

async def make_same_requests(url, headers, num_requests):
    async with aiohttp.ClientSession() as session:
        tasks = [fetch(url, session, headers) for _ in range(num_requests)]
        return await asyncio.gather(*tasks)
    
async def make_streem_requests(base_url, headers, url_stream):
    async with aiohttp.ClientSession() as session:
        tasks = [fetch(base_url + url, session, headers) for url in url_stream]
        asyncio.sleep(1/10)
        return await asyncio.gather(*tasks)

def run_same_requests(url,headers, num_requests = 1):

        # Run the asynchronous requests
        loop = asyncio.get_event_loop()
        results = loop.run_until_complete(make_same_requests(url, headers, num_requests))

        # Process the results if needed
        for result in results:
            if result.status == 200:
            
                request_info = result.request_info

                method= request_info.method
                url = request_info.url
                headers = dict(request_info.headers.items())
                
                print("Status", result.status)
                print("Method", method)
                print("url", url)
                print("headers", headers)

            else:
                print('Lading of start-async ended')

def run_streem_requests(url,headers, url_steem):

        # Run the asynchronous requests
        loop = asyncio.get_event_loop()
        results = loop.run_until_complete(make_streem_requests(url, headers, url_steem))

        # Process the results if needed
        for result in results:
            if result.status == 200:
            
                request_info = result.request_info

                method= request_info.method
                url = request_info.url
                headers = dict(request_info.headers.items())
                
                print("Status", result.status)
                print("Method", method)
                print("url", url)
                print("headers", headers)

            else:
                print('Lading of start-async ended')
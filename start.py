from itertools import product
import string
import sys

# passwords
numbers_array = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0']
passwords_special_chars_array = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '-', '_', '=', '+', '~', ';']
alphabet = list(string.ascii_letters)
password_characters_array = numbers_array + passwords_special_chars_array + alphabet

# user name
user_lower_case_chars = list(string.ascii_lowercase)
user_special_chars = [' ', '_', '.', '-', '@'] 
user_character_array = user_lower_case_chars + numbers_array + user_special_chars

print(len(password_characters_array))

def generate_combinations(characters, min_length, max_length):
    # Generate combinations with lengths from min_length to max_length
    for length in range(min_length, max_length + 1):
        for combination in product(characters, repeat=length):
            yield ''.join(combination)

# Example usage:
min_combination_length = 2
max_combination_length = 4

def get_password_iterator(min_len, max_len):
    return generate_combinations(password_characters_array, min_len, max_len)

def get_username_iterator(min_len, max_len):
    return generate_combinations(user_character_array, min_len, max_len)

if __name__ == "__main__":
    print('Second arg should be user or pass, therd arg is minimum length, forth should be max length')
    gen_counter = 0
    opperation = sys.argv[1]
    min = int(sys.argv[2])
    max = int(sys.argv[3])

    if opperation == 'user':
        # Create a generator
        combinations_generator = generate_combinations(user_character_array, min or min_combination_length, max or min_combination_length)

        # Print the generated strings
        for combination in combinations_generator:
            gen_counter += 1
            print(gen_counter, ' -> ' ,combination)

    elif opperation == 'password':
        # Create a generator
        combinations_generator = generate_combinations(password_, min or min_combination_length, max or max_combination_length)

        # Print the generated strings
        for combination in combinations_generator:
            gen_counter += 1
            print(gen_counter, ' -> ' ,combination)
